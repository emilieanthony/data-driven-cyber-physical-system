# Copyright (C) 2022  Christian Berger
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Which Docker image shall be used on the GitLab runner?
image: docker:19.03.3

# Details about how to connect to the Docker service to run this build.
variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""

services:
  - name: docker:19.03.3-dind

stages:
  - build
  - deploy
  - coverage

# Display information before we start the build.
before_script:
  - docker info
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

# This section describes what shall be done to build and test the project.
build-and-test:
  tags:
    - docker-build
  only: 
    - pushes
  except:
    - tags
  stage: build
  script:
    - docker build -f $(pwd)/project-dev/src/dockerfile_buildtest . 


# This section describes what shall be done to deploy artefacts from the project.
release:
  tags:
    - docker-build
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+.\d+.\d+$/
  before_script:
    - mkdir -p $HOME/.docker/cli-plugins/
    - wget -O $HOME/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v0.3.1/buildx-v0.3.1.linux-amd64
    - chmod a+x $HOME/.docker/cli-plugins/docker-buildx
    - "echo -e '{\n  \"experimental\": \"enabled\"\n}' | tee $HOME/.docker/config.json"
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx
  script:
    - docker buildx build --platform "linux/amd64,linux/arm/v7" -f $(pwd)/project-dev/src/dockerfile_buildtest -t "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG" .
    - docker push "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG"

coverage:
 image: ubuntu:18.04
 stage: deploy
 only: 
   # - main
   - pushes
   # - merge_requests
 except:
   - tags
 tags: 
   - docker-build
 before_script:
   - apt-get -qq update && apt-get -qq install -y gcovr ggcov  lcov build-essential cmake
 script:
   - cd project-dev/src
   - mkdir build
   - cd build
   - cmake ..
   - make
   - ls
   - make test
   #- gcov template-opencv.cpp
   #- lcov --directory . --capture --output-file coverage.info
   #- lcov --remove coverage.info '/usr/*' --output-file coverage.info
   #- lcov --list coverage.info
   #- genhtml -o res coverage.info
   - gcovr --xml-pretty --exclude-unreachable-branches --print-summary -o coverage.xml --root ${CI_PROJECT_DIR}/project-dev/src
 coverage: /^\s*lines:\s*\d+.\d+\%/
 artifacts:
   name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
   expire_in: 60 days
   paths: 
     - project-dev/src/build/res
   reports:
     cobertura: project-dev/src/build/coverage.info

